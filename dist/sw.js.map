{"version":3,"sources":["sw.js"],"names":["cacheName","staticAssets","self","addEventListener","e","caches","open","cache","addAll","skipWaiting","clients","claim","req","request","url","URL","origin","location","respondWith","cacheFirst","networkAndCache","match","cached","fetch","fresh","put","clone"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,SAAS,GAAG,WAAlB;AACA,IAAMC,YAAY,GAAG,CACnB,IADmB,EAEnB,cAFmB,EAGnB,YAHmB,EAInB,wBAJmB,EAKnB,iBALmB,CAArB;AAQAC,IAAI,CAACC,gBAAL,CAAsB,SAAtB,EAAiC,iBAAMC,CAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACXC,MAAM,CAACC,IAAP,CAAYN,SAAZ,CADW;;AAAA;AACzBO,UAAAA,KADyB;AAAA;AAAA,0CAEzBA,KAAK,CAACC,MAAN,CAAaP,YAAb,CAFyB;;AAAA;AAAA,2CAGxBC,IAAI,CAACO,WAAL,EAHwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjC;AAMAP,IAAI,CAACC,gBAAL,CAAsB,UAAtB,EAAkC,UAAAC,CAAC,EAAI;AACrCF,EAAAA,IAAI,CAACQ,OAAL,CAAaC,KAAb;AACD,CAFD;AAIAT,IAAI,CAACC,gBAAL,CAAsB,OAAtB,EAA+B,kBAAMC,CAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBQ,UAAAA,GADuB,GACjBR,CAAC,CAACS,OADe;AAEvBC,UAAAA,GAFuB,GAEjB,IAAIC,GAAJ,CAAQH,GAAG,CAACE,GAAZ,CAFiB;;AAI7B,cAAIA,GAAG,CAACE,MAAJ,KAAeC,QAAQ,CAACD,MAA5B,EAAoC;AAClCZ,YAAAA,CAAC,CAACc,WAAF,CAAcC,UAAU,CAACP,GAAD,CAAxB;AACD,WAFD,MAEO;AACLR,YAAAA,CAAC,CAACc,WAAF,CAAcE,eAAe,CAACR,GAAD,CAA7B;AACD;;AAR4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA/B;;AAWA,SAAeO,UAAf,CAA0BP,GAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACsBP,MAAM,CAACC,IAAP,CAAYN,SAAZ,CADtB;;AAAA;AACQO,UAAAA,KADR;AAAA;AAAA,0CAEuBA,KAAK,CAACc,KAAN,CAAYT,GAAZ,CAFvB;;AAAA;AAEQU,UAAAA,MAFR;AAAA,4CAGSA,MAAM,IAAIC,KAAK,CAACX,GAAD,CAHxB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,SAAeQ,eAAf,CAA+BR,GAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACsBP,MAAM,CAACC,IAAP,CAAYN,SAAZ,CADtB;;AAAA;AACQO,UAAAA,KADR;AAAA;AAAA;AAAA,0CAGwBgB,KAAK,CAACX,GAAD,CAH7B;;AAAA;AAGUY,UAAAA,KAHV;AAAA;AAAA,0CAIUjB,KAAK,CAACkB,GAAN,CAAUb,GAAV,EAAeY,KAAK,CAACE,KAAN,EAAf,CAJV;;AAAA;AAAA,4CAKWF,KALX;;AAAA;AAAA;AAAA;AAAA;AAAA,0CAOyBjB,KAAK,CAACc,KAAN,CAAYT,GAAZ,CAPzB;;AAAA;AAOUU,UAAAA,MAPV;AAAA,4CAQWA,MARX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","file":"sw.js","sourceRoot":"..","sourcesContent":["const cacheName = \"simple-v1\";\r\nconst staticAssets = [\r\n  \"./\",\r\n  \"./index.html\",\r\n  \"./images/*\",\r\n  \"./stylesheets/main.css\",\r\n  \"./dist/index.js\"\r\n];\r\n\r\nself.addEventListener(\"install\", async e => {\r\n  const cache = await caches.open(cacheName);\r\n  await cache.addAll(staticAssets);\r\n  return self.skipWaiting();\r\n});\r\n\r\nself.addEventListener(\"activate\", e => {\r\n  self.clients.claim();\r\n});\r\n\r\nself.addEventListener(\"fetch\", async e => {\r\n  const req = e.request;\r\n  const url = new URL(req.url);\r\n\r\n  if (url.origin === location.origin) {\r\n    e.respondWith(cacheFirst(req));\r\n  } else {\r\n    e.respondWith(networkAndCache(req));\r\n  }\r\n});\r\n\r\nasync function cacheFirst(req) {\r\n  const cache = await caches.open(cacheName);\r\n  const cached = await cache.match(req);\r\n  return cached || fetch(req);\r\n}\r\n\r\nasync function networkAndCache(req) {\r\n  const cache = await caches.open(cacheName);\r\n  try {\r\n    const fresh = await fetch(req);\r\n    await cache.put(req, fresh.clone());\r\n    return fresh;\r\n  } catch (e) {\r\n    const cached = await cache.match(req);\r\n    return cached;\r\n  }\r\n}\r\n"]}